plugins {
    id "dev.architectury.loom" version "1.1-SNAPSHOT"
    id "maven-publish"
    id "com.matthewprenger.cursegradle" version "1.4.0"
}

apply from: 'https://files.saps.dev/ci/git-md-changelog.gradle'

def ENV = System.getenv()

archivesBaseName = project.archives_base_name
version = "${mod_version}-build.${ENV.GITHUB_RUN_NUMBER ?: 9999}+mc${minecraft_version}"
group = 'com.unrealdinnerbone'

java.toolchain.languageVersion = JavaLanguageVersion.of(17)

def mixinJson = project.mod_id + ".mixins.json"
if(!file("src/main/resources/" + mixinJson).exists()) {
    mixinJson = null
}

loom {
    silentMojangMappingsLicense()

    forge {
        if(mixinJson) {
            mixinConfigs = [mixinJson]
        }
        dataGen {
            mod project.mod_id
        }
    }

//    launches {
//        data {
//            arg "--existing", file("src/main/resources").absolutePath
//        }
//    }
}

//            args '--mod', project.mod_id, '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')


repositories {
    maven { url = 'https://maven.parchmentmc.org' }
}

dependencies {
    minecraft "com.mojang:minecraft:${project.minecraft_version}"

    mappings loom.layered() {
        officialMojangMappings()
    }

    forge 'net.minecraftforge:forge:' + project.minecraft_version + '-' + project.forge_version
}

jar {
    manifest {
        attributes([
                "Specification-Title"     : project.mod_id,
                "Specification-Vendor"    : "UnRealDinnerbone",
                "Specification-Version"   : "1",
                "Implementation-Title"    : project.name,
                "Implementation-Version"  : version,
                "Implementation-Vendor"   : "UnRealDinnerbone",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
        ])
        if(mixinJson) attributes.put("MixinConfig", mixinJson)
    }
}


processResources {
    inputs.property "version", project.version
}


java {
    withSourcesJar()
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifactId = archivesBaseName
            artifact (remapSourcesJar) {
                classifier = "sources"
                builtBy remapSourcesJar
            }

            artifact(remapJar) {
                builtBy remapJar
            }
        }
    }


    repositories {
        if (ENV.NANITE_DEPLOY) {
            maven {
                url "https://maven.nanite.dev/releases"
                credentials {
                    username = "nanite"
                    password = "${ENV.NANITE_DEPLOY}"
                }
            }
        }
    }
}

if (ENV.CURSE_DEPLOY) {
    curseforge {
        apiKey = ENV.CURSE_DEPLOY
        project {
            id = project.curseforge_id
            releaseType = project.release_type
            addGameVersion "Forge"
            addGameVersion project.minecraft_version
            mainArtifact(remapJar.archiveFile)
            changelog = getGitChangelog()
            changelogType = 'markdown'
        }
    }
}

